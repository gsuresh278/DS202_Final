world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2022
df_2022 <- df %>% filter(Year == 2022)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(head(unique_countries, n = 1))
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2022
df_2022 <- df %>% filter(Year == 2022)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(unique_countries[1])
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2022
df_2022 <- df %>% filter(Year == 2022)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(unique_countries[1])
print(unique(world_map$region)[2])
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2022
df_2022 <- df %>% filter(Year == 2022)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(unique_countries[1])
print(unique(world_map$region)[2])
print(unique(world_map$region)[2] == unique_countries[1])
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
View(merged_data)
View(df_2022)
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2020
df_2022 <- df %>% filter(Year == 2020)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(unique_countries[1])
print(unique(world_map$region)[2])
print(unique(world_map$region)[2] == unique_countries[1])
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
merged_data
View(merged_data)
install.packages("WDI")
library(WDI)
library(dplyr)
library(tidyverse)
view(WDI)
view(WDI)
population_indicator <- WDIsearch("population total")
population_data <- WDI(country = unique_countries, indicator = population_indicator$indicator_code)
population_indicator <- WDIsearch("population total")
population_data <- WDI(country = unique_countries, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
countries <- c("USA", "CHN", "IND", "BRA")
population_data <- WDI(country = countries, indicator ="SP.POP.TOTL")
View(population_data)
view(df)
population_indicator <- WDIsearch("population total")
unique_country_codes <- unique(df$Code)
population_data <- WDI(country = unique_country_codes, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
unique_country_codes <- unique(df$Code)
valid_country_codes <- unique(df$Code) %>%
filter(!. %in% c("AI", "AQ", "CX", "CK", "GF", "GP", "MQ", "YT", "MS", "NA", "NU", "", "PM", "WF"))
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
filter(Code %in% population_indicator$iso2c) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = unique_country_codes, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
filter(Code %in% population_indicator) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = unique_country_codes, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
filter(Code %in% population_indicator) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
filter(Code %in% population_indicator$iso2c) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
view(valid_country_codes)
view(population_indicator)
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
filter(Code %in% WDIsearch("population total")$iso2c) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
view(valid_country_codes)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total")$iso2c)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total")$iso2c)
valid_country_codes <- as.character(valid_country_codes)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total"))
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
view(valid_country_codes)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total"))
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
get_population_data <- function(code) {
tryCatch(
expr = WDI(country = code, indicator = "SP.POP.TOTL"),
error = function(e) {
warning(paste("Skipping code:", code, "- Error:", conditionMessage(e)))
return(NULL)
}
)
}
# Fetch population data for valid country codes
population_data <- lapply(valid_country_codes, get_population_data)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
get_population_data <- function(code) {
tryCatch(
expr = WDI(country = code, indicator = "SP.POP.TOTL"),
error = function(e) {
warning(paste("Skipping code:", code, "- Error:", conditionMessage(e)))
return(NULL)
}
)
}
# Fetch population data for valid country codes
population_data <- lapply(valid_country_codes, get_population_data)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data_list <- list()
# Loop through each country code and try to retrieve population data
for (country_code in valid_country_codes) {
result <- tryCatch(
{
# Attempt to retrieve population data
WDI(country = country_code, indicator = "SP.POP.TOTL")
},
error = function(e) {
# Print a warning message for unrecognized country codes
warning(paste("Skipping unrecognized country code:", country_code))
# Return a placeholder value or NULL if needed
NULL
}
)
# Add the result to the list if successful
if (!inherits(result, "try-error")) {
population_data_list[[country_code]] <- result
}
}
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
get_population_data <- function(country_code) {
tryCatch(
{
WDI(country = country_code, indicator = "SP.POP.TOTL")
},
error = function(e) {
warning(paste("Skipping unrecognized country code:", country_code))
NULL
}
)
}
# Use purrr::map_df to apply the function to each country code and combine the results
population_data <- map_df(valid_country_codes, get_population_data, .id = "Code")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total"))
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
View(population_data)
View(population_data)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year"))
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "year"))
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year" = "year"))
view(merged_df)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year" = "year"))
merged_df <- select(merged_df, names(df))
view(merged_df)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year" = "year"))
View(merged_df)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- semi_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year" = "year"))
view(merged_df)
str(df)
# Check data types in population_data
str(population_data)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
View(merged_df)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
population_df %>%
filter(Year >= 1960)
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
population_df %>%
filter(Year >= 1960)
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
# WDI only contains population data from 1960
population_df %>%
filter(Year >= 1960)
china_us_data <- population_df %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country")
view(china_us_data)
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
# WDI only contains population data from 1960
population_df %>%
filter(Year >= 1960)
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
# WDI only contains population data from 1960
population_df <- population_df %>%
filter(Year >= 1960)
china_us_data <- population_df %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country")
us_data <- filtered_population_df %>%
filter(Country == "United States")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = Population.2022., y = CO2.emission..Tons. / Population.2022.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population (2022)",
y = "Emissions Rate (Tons per capita)")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population (2022)",
y = "Emissions Rate (Tons per capita)")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2020
df_2020 <- df %>% filter(Year == 2020)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2020, by = c("region" = "Country"))
# Plot the global distribution of CO2 emissions for the year 2020
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2020)",
fill = "CO2 Emissions (Tons)")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate")
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
global_emissions_ts <- ts(df$CO2.emission..Tons., start = min(df$Year), end = max(df$Year), frequency = 1)
emissions_forecast <- forecast(auto.arima(global_emissions_ts))
#install.packages("WDI")
library(WDI)
library(dplyr)
library(forecast)
global_emissions_ts <- ts(df$CO2.emission..Tons., start = min(df$Year), end = max(df$Year), frequency = 1)
emissions_forecast <- forecast(auto.arima(global_emissions_ts))
library(WDI)
library(dplyr)
library(forecast)
library(tidyverse)
global_emissions_ts <- ts(df$CO2.emission..Tons., start = min(df$Year), end = max(df$Year), frequency = 1)
emissions_forecast <- forecast(auto.arima(global_emissions_ts))
plot(emissions_forecast, main = "Forecast of Global CO2 Emissions")
View(population_df)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
wdi_data <- WDI(country = valid_country_codes, indicator =c("SP.POP.TOTL", "NY.GDP.MKTP.KD"))
wdi_data <- left_join(df, wdi_data, by = c("Code" = "iso2c", "Year" = "year"))
# WDI only contains population data from 1960
wdi_data <- wdi_data %>%
filter(Year >= 1960)
china_us_data <- wdi_data %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate")
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
view(wdi_data)
view(wdi_data)
ggplot(us_data, aes(x = NY.GDP.MKTP.KD, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "GDP vs. CO2 Emissions: United States",
x = "GDP",
y = "CO2 Emissions (Tons)")
ggplot(us_data, aes(x = `NY.GDP.MKTP.KD`, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "GDP vs. CO2 Emissions: United States",
x = "GDP",
y = "CO2 Emissions (Tons)")
china_us_data <- wdi_data %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate")
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
ggplot(us_data, aes(x = NY.GDP.MKTP.KD, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "GDP vs. CO2 Emissions: United States",
x = "GDP",
y = "CO2 Emissions (Tons)")
us_data <- wdi_data %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate")
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
ggplot(us_data, aes(x = NY.GDP.MKTP.KD, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "GDP vs. CO2 Emissions: United States",
x = "GDP",
y = "CO2 Emissions (Tons)")
