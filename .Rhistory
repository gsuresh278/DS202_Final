labs(title = "CO2 Emissions of Top 10 Countries in the 20th Century",
x = "Year",
y = "CO2 Tons") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
# Filter the original dataset for the 21st century
cent_21 <- df1 %>% filter(Year >= 2000 & Year <= 2022)
# Select the top 10 countries with the highest CO2 emissions in the 21st century
big_cent_21 <- cent_21 %>%
group_by(Country) %>%
summarise(TotalCO2 = sum(coTons)) %>%
arrange(desc(TotalCO2)) %>%
head(10)
# Filter the original dataset for the selected countries in the 21st century
CO2_cent_21 <- cent_21 %>% filter(Country %in% big_cent_21$Country)
# Plot the data using ggplot2
ggplot(CO2_cent_21, aes(x = Year, y = coTons, color = Country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions of Top 10 Countries in the 21st Century",
x = "Year",
y = "CO2 Tons") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
area2020 = df2020
area2020$coByArea <- area2020$coTons / area2020$Area
area2020
ggplot(area2020, aes(x = reorder(Country, -coByArea), y = coByArea, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", color = "white") +
theme_minimal() +
labs(x = "Country", y = "CO2 Tons per Area") +
ggtitle("CO2 Emissions per Area for Top Countries in 2020") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
scale_fill_brewer(palette = "Set3") + scale_y_continuous(labels = scales::comma)
area2020 = top10_2020
area2020$coByArea <- area2020$coTons / area2020$Area
area2020
ggplot(area2020, aes(x = reorder(Country, -coByArea), y = coByArea, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", color = "white") +
theme_minimal() +
labs(x = "Country", y = "CO2 Tons per Area") +
ggtitle("CO2 Emissions per Area for Top Countries in 2020") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
scale_fill_brewer(palette = "Set3") + scale_y_continuous(labels = scales::comma)
emissions_2020 <- df %>%
filter(Year==2020) %>%
slice_max(Population.2022., n = 20)
highest_population_emissions<-ggplot(emissions_2020, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
print(highest_population_emissions)
emissions_2020 <- df %>%
filter(Year==2020) %>%
slice_max(Population.2022., n = 20)
highest_population_emissions<-ggplot(emissions_2020, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5)
print(highest_population_emissions)
emissions_2020 <- df %>%
filter(Year==2020) %>%
slice_max(Population.2022., n = 20)
highest_population_emissions<-ggplot(emissions_2020, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5) + theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
print(highest_population_emissions)
emissions_2020 <- df %>%
filter(Year==2020) %>%
slice_max(Population.2022., n = 20)
highest_population_emissions<-ggplot(emissions_2020, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1))
print(highest_population_emissions)
library(WDI)
library(dplyr)
library(tidyverse)
df <- read.csv("CO2 emission by countries.csv")
head(df)
length(df)
nrow(df)
summary(df)
drop_na(df)
# checking for missing values
sum(is.na(df))
# removing rows with any missing values
df_clean <- na.omit(df)
#provides the structure of the dataframe, showing data types and the first few values of each variable, used for understanding the data types of each column
print("Structure: ")
str(df)
# returns the names of the columns in the dataframe
print("Column names: ")
colnames(df)
#returns the class of the object
print("class: ")
sapply(df, class)
# returns the number of unique values for each variable in the dataframe. Helps with understanding the cardinality of each variable
print("unique values: ")
sapply(df, function(x) length(unique(x)))
# remove duplicate rows
df_unique <- unique(df)
# computes the correlation matrix for the numeric variables in the dataframe. Helps with understanding the relationships between different variables
print("correlation matrix: ")
numeric_df <- df[sapply(df, is.numeric)]
cor_matrix <- cor(numeric_df)
print(cor_matrix)
unique_countries <- unique(df$Country)
print(unique_countries)
df %>%
filter(CO2.emission..Tons. != 0)
min_year_data <- df %>%
group_by(Country) %>%
filter(CO2.emission..Tons. != 0) %>%
summarise(Min_Year = min(Year),
CO2_Emission = CO2.emission..Tons.[which.min(Year)])
print(min_year_data)
selected_countries <- min_year_data %>%
filter(Min_Year < 1900)
selected_df <- df %>%
filter(Country %in% selected_countries$Country)
print(length(unique(selected_df$Country)))
ggplot(selected_df, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions of Countries with Min Year < 1900",
x = "Year",
y = "CO2 Emission (Tons)") +
theme_minimal()
population_threshold <- 75000000  # 75 million
large_countries <- df %>%
filter(Population.2022. > population_threshold)
print(large_countries)
countries_agreements <- large_countries %>%
filter(Year > 1985)
head(countries_agreements)
agreements_years <- ggplot(countries_agreements, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Compared to Dates of International Agreements",
x = "Year",
y = "CO2 Emission (Tons)") +
theme_minimal()
agreements_years + geom_vline(xintercept=1997)
agreements_years + geom_vline(xintercept=2015)
largest_emissions <- df%>%
filter(Year == 2020) %>%
slice_max(CO2.emission..Tons., n = 10)
print(largest_emissions)
most_emissions_graph<-ggplot(largest_emissions, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5) +
labs(title = "Top 10 Countries by CO2 Emissions in 2020",
x = "Country",
y = "CO2 Emission (Tons)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
print(most_emissions_graph)
emissions_2020 <- df %>%
filter(Year==2020) %>%
slice_max(Population.2022., n = 20)
highest_population_emissions<-ggplot(emissions_2020, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1))
print(highest_population_emissions)
=======
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2022
df_2022 <- df %>% filter(Year == 2022)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(head(unique_countries, n = 1))
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2022
df_2022 <- df %>% filter(Year == 2022)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(unique_countries[1])
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2022
df_2022 <- df %>% filter(Year == 2022)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(unique_countries[1])
print(unique(world_map$region)[2])
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2022
df_2022 <- df %>% filter(Year == 2022)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(unique_countries[1])
print(unique(world_map$region)[2])
print(unique(world_map$region)[2] == unique_countries[1])
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
View(merged_data)
View(df_2022)
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2020
df_2022 <- df %>% filter(Year == 2020)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2022, by = c("region" = "Country"))
print(unique_countries[1])
print(unique(world_map$region)[2])
print(unique(world_map$region)[2] == unique_countries[1])
print(merged_data)
# Plot the global distribution of CO2 emissions for the year 2022
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2022)",
fill = "CO2 Emissions (Tons)")
merged_data
View(merged_data)
install.packages("WDI")
library(WDI)
library(dplyr)
library(tidyverse)
view(WDI)
view(WDI)
population_indicator <- WDIsearch("population total")
population_data <- WDI(country = unique_countries, indicator = population_indicator$indicator_code)
population_indicator <- WDIsearch("population total")
population_data <- WDI(country = unique_countries, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
countries <- c("USA", "CHN", "IND", "BRA")
population_data <- WDI(country = countries, indicator ="SP.POP.TOTL")
View(population_data)
view(df)
population_indicator <- WDIsearch("population total")
unique_country_codes <- unique(df$Code)
population_data <- WDI(country = unique_country_codes, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
unique_country_codes <- unique(df$Code)
valid_country_codes <- unique(df$Code) %>%
filter(!. %in% c("AI", "AQ", "CX", "CK", "GF", "GP", "MQ", "YT", "MS", "NA", "NU", "", "PM", "WF"))
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
filter(Code %in% population_indicator$iso2c) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = unique_country_codes, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
filter(Code %in% population_indicator) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = unique_country_codes, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
filter(Code %in% population_indicator) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
filter(Code %in% population_indicator$iso2c) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
view(valid_country_codes)
view(population_indicator)
population_indicator <- WDIsearch("population total")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
filter(Code %in% WDIsearch("population total")$iso2c) %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
view(valid_country_codes)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total")$iso2c)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total")$iso2c)
valid_country_codes <- as.character(valid_country_codes)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total"))
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
view(valid_country_codes)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total"))
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
get_population_data <- function(code) {
tryCatch(
expr = WDI(country = code, indicator = "SP.POP.TOTL"),
error = function(e) {
warning(paste("Skipping code:", code, "- Error:", conditionMessage(e)))
return(NULL)
}
)
}
# Fetch population data for valid country codes
population_data <- lapply(valid_country_codes, get_population_data)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
get_population_data <- function(code) {
tryCatch(
expr = WDI(country = code, indicator = "SP.POP.TOTL"),
error = function(e) {
warning(paste("Skipping code:", code, "- Error:", conditionMessage(e)))
return(NULL)
}
)
}
# Fetch population data for valid country codes
population_data <- lapply(valid_country_codes, get_population_data)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data_list <- list()
# Loop through each country code and try to retrieve population data
for (country_code in valid_country_codes) {
result <- tryCatch(
{
# Attempt to retrieve population data
WDI(country = country_code, indicator = "SP.POP.TOTL")
},
error = function(e) {
# Print a warning message for unrecognized country codes
warning(paste("Skipping unrecognized country code:", country_code))
# Return a placeholder value or NULL if needed
NULL
}
)
# Add the result to the list if successful
if (!inherits(result, "try-error")) {
population_data_list[[country_code]] <- result
}
}
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
get_population_data <- function(country_code) {
tryCatch(
{
WDI(country = country_code, indicator = "SP.POP.TOTL")
},
error = function(e) {
warning(paste("Skipping unrecognized country code:", country_code))
NULL
}
)
}
# Use purrr::map_df to apply the function to each country code and combine the results
population_data <- map_df(valid_country_codes, get_population_data, .id = "Code")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
valid_country_codes <- intersect(valid_country_codes, WDIsearch("population total"))
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
View(population_data)
View(population_data)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year"))
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "year"))
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year" = "year"))
view(merged_df)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year" = "year"))
merged_df <- select(merged_df, names(df))
view(merged_df)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year" = "year"))
View(merged_df)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- semi_join(df, population_data, by = c("Calling.Code" = "iso2c", "Year" = "year"))
view(merged_df)
str(df)
# Check data types in population_data
str(population_data)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
merged_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
View(merged_df)
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
population_data <- WDI(country = valid_country_codes, indicator ="SP.POP.TOTL")
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
population_df %>%
filter(Year >= 1960)
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
population_df %>%
filter(Year >= 1960)
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
# WDI only contains population data from 1960
population_df %>%
filter(Year >= 1960)
china_us_data <- population_df %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country")
view(china_us_data)
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
# WDI only contains population data from 1960
population_df %>%
filter(Year >= 1960)
population_df <- left_join(df, population_data, by = c("Code" = "iso2c", "Year" = "year"))
# WDI only contains population data from 1960
population_df <- population_df %>%
filter(Year >= 1960)
china_us_data <- population_df %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country")
us_data <- filtered_population_df %>%
filter(Country == "United States")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = Population.2022., y = CO2.emission..Tons. / Population.2022.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population (2022)",
y = "Emissions Rate (Tons per capita)")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population (2022)",
y = "Emissions Rate (Tons per capita)")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
>>>>>>> ec609991c36ad00ca4106a7ca6fae767c28eda6c
world_map <- map_data("world")
world_map <- world_map %>%
mutate(region = case_when(
region == "UK" ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2020
df_2020 <- df %>% filter(Year == 2020)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2020, by = c("region" = "Country"))
# Plot the global distribution of CO2 emissions for the year 2020
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2020)",
fill = "CO2 Emissions (Tons)")
<<<<<<< HEAD
library(ggplot2)
library(dplyr)
library(ggthemes)
# Load world map data
world_map <- map_data("world")
# Rename regions for consistency
world_map <- world_map %>%
mutate(region = case_when(
region == "UK"  ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2020
df_2020 <- df %>% filter(Year == 2020)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2020, by = c("region" = "Country"))
# Plot the global distribution of CO2 emissions for the year 2020
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2020)",
fill = "CO2 Emissions (Tons)") +
theme_map()
=======
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate")
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
global_emissions_ts <- ts(df$CO2.emission..Tons., start = min(df$Year), end = max(df$Year), frequency = 1)
emissions_forecast <- forecast(auto.arima(global_emissions_ts))
#install.packages("WDI")
library(WDI)
library(dplyr)
library(forecast)
global_emissions_ts <- ts(df$CO2.emission..Tons., start = min(df$Year), end = max(df$Year), frequency = 1)
emissions_forecast <- forecast(auto.arima(global_emissions_ts))
library(WDI)
library(dplyr)
library(forecast)
library(tidyverse)
global_emissions_ts <- ts(df$CO2.emission..Tons., start = min(df$Year), end = max(df$Year), frequency = 1)
emissions_forecast <- forecast(auto.arima(global_emissions_ts))
plot(emissions_forecast, main = "Forecast of Global CO2 Emissions")
View(population_df)
>>>>>>> ec609991c36ad00ca4106a7ca6fae767c28eda6c
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
wdi_data <- WDI(country = valid_country_codes, indicator =c("SP.POP.TOTL", "NY.GDP.MKTP.KD"))
wdi_data <- left_join(df, wdi_data, by = c("Code" = "iso2c", "Year" = "year"))
# WDI only contains population data from 1960
wdi_data <- wdi_data %>%
filter(Year >= 1960)
china_us_data <- wdi_data %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country")
<<<<<<< HEAD
=======
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate")
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
view(wdi_data)
view(wdi_data)
ggplot(us_data, aes(x = NY.GDP.MKTP.KD, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "GDP vs. CO2 Emissions: United States",
x = "GDP",
y = "CO2 Emissions (Tons)")
ggplot(us_data, aes(x = `NY.GDP.MKTP.KD`, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "GDP vs. CO2 Emissions: United States",
x = "GDP",
y = "CO2 Emissions (Tons)")
china_us_data <- wdi_data %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country")
us_data <- population_df %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate")
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
ggplot(us_data, aes(x = NY.GDP.MKTP.KD, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "GDP vs. CO2 Emissions: United States",
x = "GDP",
y = "CO2 Emissions (Tons)")
>>>>>>> ec609991c36ad00ca4106a7ca6fae767c28eda6c
us_data <- wdi_data %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate")
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
<<<<<<< HEAD
# Filter data for the United States
us_data <- wdi_data %>%
filter(Country == "United States")
# Create a new variable for faceting
facet_var <- rep(c("Total", "Per Capita"), length.out = nrow(us_data))
# Add the facet_var variable to the dataset
us_data <- mutate(us_data, facet_var = facet_var)
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate") +
facet_wrap(~facet_var, scales = "free_y", ncol = 1) +
ylab(NULL) +
theme(strip.background = element_blank(), strip.text.x = element_blank()) + scale_y_continuous(labels = scales::comma)
=======
>>>>>>> ec609991c36ad00ca4106a7ca6fae767c28eda6c
ggplot(us_data, aes(x = NY.GDP.MKTP.KD, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "GDP vs. CO2 Emissions: United States",
x = "GDP",
y = "CO2 Emissions (Tons)")
<<<<<<< HEAD
library(dplyr)
# renaming so its easier to type
df1 <- df %>%
rename(coTons = "CO2.emission..Tons.", population = "Population.2022.")
# sorts df1 based on the population column in descending order
df1 <- df1 %>%
arrange(desc(population))
# getting all data from 2020
df2020 <- df1 %>%
filter(Year == 2020)
head(df2020)
# filter where it returns all rows where one value has NaN on all columns
null2020 <- df2020 %>%
filter(rowSums(is.na(.)) > 0)
null2020$Country
num_rows <- nrow(null2020)
print(num_rows)
# Identify the most polluting country
theMostPolluting <- df2020[df2020$coTons == max(df2020$coTons, na.rm = TRUE), ]
theMostPolluting
# number of countries required to match the CO2 emissions of the US
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
i <- 1
countriesCo2Sum <- 0
countriesSum <- data.frame(matrix(ncol = ncol(sorted2020), nrow = 0))
colnames(countriesSum) <- colnames(sorted2020)
theMostPolluting <- df2020[order(-df2020$coTons), ][1, ]
while (theMostPolluting$coTons > countriesCo2Sum) {
countriesCo2Sum <- countriesCo2Sum + sorted2020$coTons[i]
row <- sorted2020[i, ]
countriesSum <- rbind(countriesSum, row)
i <- i + 1
}
cat(paste(i - 1, " ", countriesCo2Sum, "\n"))
countriesSum
# Select the top 10 countries with the highest CO2 emissions in 2020
top10_2020 <- df2020 %>% arrange(desc(coTons)) %>% head(10)
# Filter the original dataset for the selected countries
topCountriesCO2 <- df1 %>% filter(Country %in% top10_2020$Country)
# Plot the data using ggplot2
ggplot(topCountriesCO2, aes(x = Year, y = coTons, color = Country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions of Top 10 Countries in 2020",
x = "Year",
y = "CO2 Tons") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
# 18th century
cent_18 <- df1 %>% filter(Year >= 1750 & Year <= 1799)
# Select the top 10 countries with the highest CO2 emissions in the 19th century
big_cent_18 <- cent_18 %>%
group_by(Country) %>%
summarise(TotalCO2 = sum(coTons)) %>%
arrange(desc(TotalCO2)) %>%
head(10)
# Filter the original dataset for the selected countries in the 19th century
CO2_cent_18 <- cent_18 %>% filter(Country %in% big_cent_18$Country)
# Plot the data using ggplot2
ggplot(CO2_cent_18, aes(x = Year, y = coTons, color = Country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions of Top 10 Countries in the 18th Century",
x = "Year",
y = "CO2 Tons") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
# 19th century
cent_19 <- df1 %>% filter(Year >= 1800 & Year <= 1899)
# Select the top 10 countries with the highest CO2 emissions in the 19th century
big_cent_19 <- df19thCentury %>%
group_by(Country) %>%
summarise(TotalCO2 = sum(coTons)) %>%
arrange(desc(TotalCO2)) %>%
head(10)
# number of countries required to match the CO2 emissions of the US
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
i <- 1
countriesCo2Sum <- 0
countriesSum <- data.frame(matrix(ncol = ncol(sorted2020), nrow = 0))
colnames(countriesSum) <- colnames(sorted2020)
theMostPolluting <- df2020[order(-df2020$coTons), ][1, ]
while (theMostPolluting$coTons > countriesCo2Sum) {
countriesCo2Sum <- countriesCo2Sum + sorted2020$coTons[i]
row <- sorted2020[i, ]
countriesSum <- rbind(countriesSum, row)
i <- i + 1
}
cat(paste(i - 1, " ", countriesCo2Sum, "\n"))
countriesSum
# number of countries required to match the CO2 emissions of the US
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
i <- 1
countriesCo2Sum <- 0
countriesSum <- data.frame(matrix(ncol = ncol(sorted2020), nrow = 0))
colnames(countriesSum) <- colnames(sorted2020)
theMostPolluting <- df2020[order(-df2020$coTons), ][1, ]
# number of countries required to match the CO2 emissions of the US
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
i <- 1
countriesCo2Sum <- 0
countriesSum <- data.frame(matrix(ncol = ncol(sorted2020), nrow = 0))
colnames(countriesSum) <- colnames(sorted2020)
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
i <- 1
countriesCo2Sum <- 0
countriesSum <- data.frame(matrix(ncol = ncol(sorted2020), nrow = 0))
colnames(countriesSum) <- colnames(sorted2020)
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# Create a bubble chart
ggplot(sorted2020, aes(x = reorder(Country, coTons), y = coTons, size = Population)) +
geom_point(aes(color = Country), alpha = 0.7) +
scale_size_continuous(range = c(3, 15)) +
labs(title = "CO2 Emissions Bubble Chart in 2020",
x = "Country",
y = "CO2 Emission (Tons)",
subtitle = paste("Most Polluting Country: ", mostPolluting$Country, " (", mostPolluting$coTons, " Tons)")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
scale_color_brewer(palette = "Set3")
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# Create a bubble chart
ggplot(sorted2020, aes(x = reorder(Country, coTons), y = coTons, size = Population)) +
geom_point(aes(color = Country), alpha = 0.7) +
scale_size_continuous(range = c(3, 15)) +
labs(title = "CO2 Emissions Bubble Chart in 2020",
x = "Country",
y = "CO2 Emission (Tons)",
subtitle = paste("Most Polluting Country: ", mostPolluting$Country, " (", mostPolluting$coTons, " Tons)")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
scale_color_brewer(palette = "Set3")
# Load required libraries
library(ggplot2)
# Sort the data by CO2 emissions
sorted2020 <- df2020 %>% arrange(coTons)
# Identify the most polluting country
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
# Create a bubble chart
ggplot(sorted2020, aes(x = reorder(Country, coTons), y = coTons, size = Population)) +
geom_point(aes(color = Country), alpha = 0.7) +
scale_size_continuous(range = c(3, 15)) +
labs(title = "CO2 Emissions Bubble Chart in 2020",
x = "Country",
y = "CO2 Emission (Tons)",
subtitle = paste("Most Polluting Country: ", mostPolluting$Country, " (", mostPolluting$coTons, " Tons)")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
scale_color_brewer(palette = "Set3")
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# Create a bubble chart
ggplot(sorted2020, aes(x = reorder(Country, coTons), y = coTons, size = Population)) +
geom_point(aes(color = Country), alpha = 0.7) +
scale_size_continuous(range = c(3, 15)) +
labs(title = "CO2 Emissions Bubble Chart in 2020",
x = "Country",
y = "CO2 Emission (Tons)",
subtitle = paste("Most Polluting Country: ", mostPolluting$Country, " (", mostPolluting$coTons, " Tons)")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
scale_color_brewer(palette = "Set3")
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# Create a scatter plot with line segments
ggplot(sorted2020, aes(x = reorder(Country, coTons), y = coTons, color = Country)) +
geom_point(aes(shape = Country), size = 4, alpha = 0.7) +
geom_segment(aes(x = reorder(Country, coTons), xend = reorder(Country, coTons), y = 0, yend = coTons),
linetype = "dashed", color = "gray", alpha = 0.5, size = 0.5) +
labs(title = "CO2 Emissions Visualization in 2020",
x = "Country",
y = "CO2 Emission (Tons)",
subtitle = paste("Most Polluting Country: ", mostPolluting$Country, " (", mostPolluting$coTons, " Tons)")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
scale_shape_manual(values = 1:nrow(sorted2020)) +
scale_color_brewer(palette = "Set3") +
scale_alpha_continuous(range = c(0.5, 1))
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# Create a scatter plot with line segments
ggplot(sorted2020, aes(x = reorder(Country, coTons), y = coTons, color = Country)) +
geom_point(aes(shape = Country), size = 4, alpha = 0.7) +
geom_segment(aes(x = reorder(Country, coTons), xend = reorder(Country, coTons), y = 0, yend = coTons),
linetype = "dashed", color = "gray", alpha = 0.5, size = 0.5) +
labs(title = "CO2 Emissions Visualization in 2020",
x = "Country",
y = "CO2 Emission (Tons)",
subtitle = paste("Most Polluting Country: ", mostPolluting$Country, " (", mostPolluting$coTons, " Tons)")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
scale_shape_manual(values = 16:(15 + nrow(sorted2020))) +
scale_color_brewer(palette = "Set3") +
scale_alpha_continuous(range = c(0.5, 1))
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# Create a scatter plot with line segments
ggplot(sorted2020, aes(x = reorder(Country, coTons), y = coTons, fill = Country)) +
geom_bar(stat = "identity", alpha = 0.7) +
labs(title = "CO2 Emissions Bar Plot in 2020",
x = "Country",
y = "CO2 Emission (Tons)",
subtitle = paste("Most Polluting Country: ", mostPolluting$Country, " (", mostPolluting$coTons, " Tons)")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
scale_fill_brewer(palette = "Set3")
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# 19th century
cent_19 <- df1 %>% filter(Year >= 1800 & Year <= 1899)
# Select the top 10 countries with the highest CO2 emissions in the 19th century
big_cent_19 <- df19thCentury %>%
group_by(Country) %>%
summarise(TotalCO2 = sum(coTons)) %>%
arrange(desc(TotalCO2)) %>%
head(10)
# 19th century
cent_19 <- df1 %>% filter(Year >= 1800 & Year <= 1899)
# Select the top 10 countries with the highest CO2 emissions in the 19th century
big_cent_19 <- cent_19 %>%
group_by(Country) %>%
summarise(TotalCO2 = sum(coTons)) %>%
arrange(desc(TotalCO2)) %>%
head(10)
# Filter the original dataset for the selected countries in the 19th century
CO2_cent_19 <- cent_19 %>% filter(Country %in% big_cent_19$Country)
# Plot the data using ggplot2
ggplot(CO2_cent_19, aes(x = Year, y = coTons, color = Country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions of Top 10 Countries in the 19th Century",
x = "Year",
y = "CO2 Tons") + scale_y_continuous(labels = scales::comma)
