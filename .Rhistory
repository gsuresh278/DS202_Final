labs(title = "Global Distribution of CO2 Emissions (Year 2020)",
fill = "CO2 Emissions (Tons)") +
theme_map()
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
wdi_data <- WDI(country = valid_country_codes, indicator =c("SP.POP.TOTL", "NY.GDP.MKTP.KD"))
emissions_2020 <- df %>%
filter(Year==2020) %>%
slice_max(Population.2022., n = 20)
highest_population_emissions<-ggplot(emissions_2020, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) + scale_y_continuous(labels = scales::comma)
print(highest_population_emissions)
selected_countries <- min_year_data %>%
filter(Min_Year < 1900)
selected_df <- df %>%
filter(Country %in% selected_countries$Country)
print(length(unique(selected_df$Country)))
ggplot(selected_df, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions of Countries with Min Year < 1900",
x = "Year",
y = "CO2 Emission (Tons)") +
theme_minimal()
library(ggplot2)
library(dplyr)
# Filter countries with Min_Year < 1900
selected_countries <- min_year_data %>%
filter(Min_Year < 1900)
# Filter data for selected countries
selected_df <- df %>%
filter(Country %in% selected_countries$Country)
# Get the top 10 countries based on some criterion (e.g., average CO2 emissions)
top_10_countries <- selected_df %>%
group_by(Country) %>%
summarize(avg_emission = mean(CO2.emission..Tons.)) %>%
top_n(10, wt = avg_emission) %>%
pull(Country)
# Filter the data for the top 10 countries
selected_df_top10 <- selected_df %>%
filter(Country %in% top_10_countries)
# Plotting
ggplot(selected_df_top10, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "Top 10 CO2 Emissions of Countries with Min Year < 1900",
x = "Year",
y = "CO2 Emission (Tons)") +
theme_minimal()
# Filter countries with Min_Year < 1900
selected_countries <- min_year_data %>%
filter(Min_Year < 1900)
# Filter data for selected countries
selected_df <- df %>%
filter(Country %in% selected_countries$Country)
# Get the top 10 countries based on some criterion (e.g., average CO2 emissions)
top_10_countries <- selected_df %>%
group_by(Country) %>%
summarize(avg_emission = mean(CO2.emission..Tons.)) %>%
top_n(10, wt = avg_emission) %>%
pull(Country)
# Filter the data for the top 10 countries
selected_df_top10 <- selected_df %>%
filter(Country %in% top_10_countries)
# Plotting
ggplot(selected_df_top10, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "Top 10 CO2 Emissions of Countries with Min Year < 1900",
x = "Year",
y = "CO2 Emission (Tons)") +
theme_minimal()
df <- drop_na(df)
# Filter countries with Min_Year < 1900
selected_countries <- min_year_data %>%
filter(Min_Year < 1900)
# Filter data for selected countries
selected_df <- df %>%
filter(Country %in% selected_countries$Country)
# Get the top 10 countries based on some criterion (e.g., average CO2 emissions)
top_10_countries <- selected_df %>%
group_by(Country) %>%
summarize(avg_emission = mean(CO2.emission..Tons.)) %>%
top_n(10, wt = avg_emission) %>%
pull(Country)
# Filter the data for the top 10 countries
selected_df_top10 <- selected_df %>%
filter(Country %in% top_10_countries)
# Plotting
ggplot(selected_df_top10, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "Top 10 CO2 Emissions of Countries with Min Year < 1900",
x = "Year",
y = "CO2 Emission (Tons)") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
countries_agreements <- large_countries %>%
filter(Year > 1985)
head(countries_agreements)
agreements_years <- ggplot(countries_agreements, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Compared to Dates of International Agreements",
x = "Year",
y = "CO2 Emission (Tons)") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
agreements_years + geom_vline(xintercept=1997)
agreements_years + geom_vline(xintercept=2015)
largest_emissions <- df%>%
filter(Year == 2020) %>%
slice_max(CO2.emission..Tons., n = 10)
print(largest_emissions)
most_emissions_graph<-ggplot(largest_emissions, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5) +
labs(title = "Top 10 Countries by CO2 Emissions in 2020",
x = "Country",
y = "CO2 Emission (Tons)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) + scale_y_continuous(labels = scales::comma)
print(most_emissions_graph)
# Load world map data
world_map <- map_data("world")
# Rename regions for consistency
world_map <- world_map %>%
mutate(region = case_when(
region == "UK"  ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2020
df_2020 <- df %>% filter(Year == 2020)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2020, by = c("region" = "Country"))
# Plot the global distribution of CO2 emissions for the year 2020
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2020)",
fill = "CO2 Emissions (Tons)") +
theme_map()
# Load world map data
world_map <- map_data("world")
# Rename regions for consistency
world_map <- world_map %>%
mutate(region = case_when(
region == "UK"  ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2020
df_2020 <- df %>% filter(Year == 2020)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2020, by = c("region" = "Country"))
# Plot the global distribution of CO2 emissions for the year 2020
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2020)",
fill = "CO2 Emissions (Tons)") +
theme_map()
library(WDI)
library(dplyr)
library(tidyverse)
library(ggthemes)
df <- read.csv("CO2 emission by countries.csv")
head(df)
length(df)
nrow(df)
summary(df)
df <- drop_na(df)
# checking for missing values
sum(is.na(df))
# removing rows with any missing values
df_clean <- na.omit(df)
#provides the structure of the dataframe, showing data types and the first few values of each variable, used for understanding the data types of each column
print("Structure: ")
str(df)
# returns the names of the columns in the dataframe
print("Column names: ")
colnames(df)
#returns the class of the object
print("class: ")
sapply(df, class)
# returns the number of unique values for each variable in the dataframe. Helps with understanding the cardinality of each variable
print("unique values: ")
sapply(df, function(x) length(unique(x)))
# remove duplicate rows
df_unique <- unique(df)
# computes the correlation matrix for the numeric variables in the dataframe. Helps with understanding the relationships between different variables
print("correlation matrix: ")
numeric_df <- df[sapply(df, is.numeric)]
cor_matrix <- cor(numeric_df)
print(cor_matrix)
unique_countries <- unique(df$Country)
print(unique_countries)
df %>%
filter(CO2.emission..Tons. != 0)
min_year_data <- df %>%
group_by(Country) %>%
filter(CO2.emission..Tons. != 0) %>%
summarise(Min_Year = min(Year),
CO2_Emission = CO2.emission..Tons.[which.min(Year)])
print(min_year_data)
# Filter countries with Min_Year < 1900
selected_countries <- min_year_data %>%
filter(Min_Year < 1900)
# Filter data for selected countries
selected_df <- df %>%
filter(Country %in% selected_countries$Country)
# Get the top 10 countries based on some criterion (e.g., average CO2 emissions)
top_10_countries <- selected_df %>%
group_by(Country) %>%
summarize(avg_emission = mean(CO2.emission..Tons.)) %>%
top_n(10, wt = avg_emission) %>%
pull(Country)
# Filter the data for the top 10 countries
selected_df_top10 <- selected_df %>%
filter(Country %in% top_10_countries)
# Plotting
ggplot(selected_df_top10, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "Top 10 CO2 Emissions of Countries with Min Year < 1900",
x = "Year",
y = "CO2 Emission (Tons)") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
population_threshold <- 75000000  # 75 million
large_countries <- df %>%
filter(Population.2022. > population_threshold)
print(large_countries)
countries_agreements <- large_countries %>%
filter(Year > 1985)
head(countries_agreements)
agreements_years <- ggplot(countries_agreements, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Compared to Dates of International Agreements",
x = "Year",
y = "CO2 Emission (Tons)") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
agreements_years + geom_vline(xintercept=1997)
agreements_years + geom_vline(xintercept=2015)
largest_emissions <- df%>%
filter(Year == 2020) %>%
slice_max(CO2.emission..Tons., n = 10)
print(largest_emissions)
most_emissions_graph<-ggplot(largest_emissions, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5) +
labs(title = "Top 10 Countries by CO2 Emissions in 2020",
x = "Country",
y = "CO2 Emission (Tons)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) + scale_y_continuous(labels = scales::comma)
print(most_emissions_graph)
emissions_2020 <- df %>%
filter(Year==2020) %>%
slice_max(Population.2022., n = 20)
highest_population_emissions<-ggplot(emissions_2020, aes(x=Country, y=CO2.emission..Tons., col=Country)) +
geom_point(size = 5) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) + scale_y_continuous(labels = scales::comma)
print(highest_population_emissions)
# Load world map data
world_map <- map_data("world")
# Rename regions for consistency
world_map <- world_map %>%
mutate(region = case_when(
region == "UK"  ~ "United Kingdom",
region == "USA" ~ "United States",
TRUE ~ region
))
# Filter the data for the year 2020
df_2020 <- df %>% filter(Year == 2020)
# Perform inner join with the world map data
merged_data <- inner_join(world_map, df_2020, by = c("region" = "Country"))
# Plot the global distribution of CO2 emissions for the year 2020
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = CO2.emission..Tons.)) +
geom_polygon(color = "white") +
labs(title = "Global Distribution of CO2 Emissions (Year 2020)",
fill = "CO2 Emissions (Tons)") +
theme_map()
valid_country_codes <- df %>%
distinct(Code) %>%
pull(Code)
wdi_data <- WDI(country = valid_country_codes, indicator =c("SP.POP.TOTL", "NY.GDP.MKTP.KD"))
wdi_data <- left_join(df, wdi_data, by = c("Code" = "iso2c", "Year" = "year"))
# WDI only contains population data from 1960
wdi_data <- wdi_data %>%
filter(Year >= 1960)
china_us_data <- wdi_data %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country")
us_data <- wdi_data %>%
filter(Country == "United States")
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions: United States",
x = "Population",
y = "Emissions")
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons. / SP.POP.TOTL)) +
geom_point() +
labs(title = "Population vs. Emissions: United States",
x = "Population",
y = "Emissions Rate (Tons per capita)")
# Filter data for the United States
us_data <- wdi_data %>%
filter(Country == "United States")
# Create a new variable for faceting
facet_var <- rep(c("Total", "Per Capita"), length.out = nrow(us_data))
# Add the facet_var variable to the dataset
us_data <- mutate(us_data, facet_var = facet_var)
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population",
y = "Emissions Rate") +
facet_wrap(~facet_var, scales = "free_y", ncol = 1) +
ylab(NULL) +
theme(strip.background = element_blank(), strip.text.x = element_blank()) + scale_y_continuous(labels = scales::comma)
# Assuming wdi_data is your initial dataframe with columns: Country, SP.POP.TOTL, CO2.emission..Tons.
# Filter data for the United States
# Assuming wdi_data is your initial dataframe with columns: Country, SP.POP.TOTL, CO2.emission..Tons.
# Filter data for the United States
us_data <- wdi_data %>%
filter(Country == "United States")
# Create a new variable for faceting
facet_var <- rep(c("Total", "Per Capita"), length.out = nrow(us_data))
# Add the facet_var variable to the dataset
us_data <- mutate(us_data, facet_var = facet_var)
# Plot population vs. emissions rate for the United States
ggplot(us_data, aes(x = SP.POP.TOTL, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "Population vs. Emissions Rate: United States",
x = "Population") +
facet_grid(facet_var ~ ., scales = "free_y", switch = 'y') +
ylab("Emissions Rate (Total)") +
theme(strip.background = element_blank(), strip.text.x = element_blank()) +
scale_y_continuous(labels = scales::comma) +
theme(strip.background = element_blank(), strip.text.x = element_blank())
ggplot(us_data, aes(x = NY.GDP.MKTP.KD, y = CO2.emission..Tons.)) +
geom_point() +
labs(title = "GDP vs. CO2 Emissions: United States",
x = "GDP",
y = "CO2 Emissions (Tons)")
# renaming so its easier to type
df1 <- df %>%
rename(coTons = "CO2.emission..Tons.", population = "Population.2022.")
# sorts df1 based on the population column in descending order
df1 <- df1 %>%
arrange(desc(population))
# getting all data from 2020
df2020 <- df1 %>%
filter(Year == 2020)
head(df2020)
# filter where it returns all rows where one value has NaN on all columns
null2020 <- df2020 %>%
filter(rowSums(is.na(.)) > 0)
null2020$Country
num_rows <- nrow(null2020)
print(num_rows)
# Identify the most polluting country
theMostPolluting <- df2020[df2020$coTons == max(df2020$coTons, na.rm = TRUE), ]
theMostPolluting
# arrange in ascending order based on coTons column
sorted2020 <- df2020 %>% arrange(coTons)
sorted2020
mostPolluting <- df2020[order(-df2020$coTons), ][1, ]
mostPolluting
# Select the top 10 countries with the highest CO2 emissions in 2020
top10_2020 <- df2020 %>% arrange(desc(coTons)) %>% head(10)
# Filter the original dataset for the selected countries
topCountriesCO2 <- df1 %>% filter(Country %in% top10_2020$Country)
# Plot the data using ggplot2
ggplot(topCountriesCO2, aes(x = Year, y = coTons, color = Country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions of Top 10 Countries in 2020",
x = "Year",
y = "CO2 Tons") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
# 18th century
cent_18 <- df1 %>% filter(Year >= 1750 & Year <= 1799)
# Select the top 10 countries with the highest CO2 emissions in the 19th century
big_cent_18 <- cent_18 %>%
group_by(Country) %>%
summarise(TotalCO2 = sum(coTons)) %>%
arrange(desc(TotalCO2)) %>%
head(10)
# Filter the original dataset for the selected countries in the 19th century
CO2_cent_18 <- cent_18 %>% filter(Country %in% big_cent_18$Country)
# Plot the data using ggplot2
ggplot(CO2_cent_18, aes(x = Year, y = coTons, color = Country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions of Top 10 Countries in the 18th Century",
x = "Year",
y = "CO2 Tons") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
# 19th century
cent_19 <- df1 %>% filter(Year >= 1800 & Year <= 1899)
# Select the top 10 countries with the highest CO2 emissions in the 19th century
big_cent_19 <- cent_19 %>%
group_by(Country) %>%
summarise(TotalCO2 = sum(coTons)) %>%
arrange(desc(TotalCO2)) %>%
head(10)
# Filter the original dataset for the selected countries in the 19th century
CO2_cent_19 <- cent_19 %>% filter(Country %in% big_cent_19$Country)
# Plot the data using ggplot2
ggplot(CO2_cent_19, aes(x = Year, y = coTons, color = Country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions of Top 10 Countries in the 19th Century",
x = "Year",
y = "CO2 Tons") + scale_y_continuous(labels = scales::comma)
# 20th century
# Filter the original dataset for the 20th century
cent_20 <- df1 %>% filter(Year >= 1900 & Year <= 1999)
# Select the top 10 countries with the highest CO2 emissions in the 20th century
big_cent_20 <- cent_20 %>%
group_by(Country) %>%
summarise(TotalCO2 = sum(coTons)) %>%
arrange(desc(TotalCO2)) %>%
head(10)
# Filter the original dataset for the selected countries in the 20th century
CO2_cent_20 <- cent_20 %>% filter(Country %in% big_cent_20$Country)
# Plot the data using ggplot2
ggplot(CO2_cent_20, aes(x = Year, y = coTons, color = Country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions of Top 10 Countries in the 20th Century",
x = "Year",
y = "CO2 Tons") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
# Filter the original dataset for the 21st century
cent_21 <- df1 %>% filter(Year >= 2000 & Year <= 2022)
# Select the top 10 countries with the highest CO2 emissions in the 21st century
big_cent_21 <- cent_21 %>%
group_by(Country) %>%
summarise(TotalCO2 = sum(coTons)) %>%
arrange(desc(TotalCO2)) %>%
head(10)
# Filter the original dataset for the selected countries in the 21st century
CO2_cent_21 <- cent_21 %>% filter(Country %in% big_cent_21$Country)
# Plot the data using ggplot2
ggplot(CO2_cent_21, aes(x = Year, y = coTons, color = Country)) +
geom_line(size = 1) +
labs(title = "CO2 Emissions of Top 10 Countries in the 21st Century",
x = "Year",
y = "CO2 Tons") +
theme_minimal() + scale_y_continuous(labels = scales::comma)
area2020 = top10_2020
area2020$coByArea <- area2020$coTons / area2020$Area
area2020
ggplot(area2020, aes(x = reorder(Country, -coByArea), y = coByArea, fill = Country)) +
geom_bar(stat = "identity", position = "dodge", color = "white") +
theme_minimal() +
labs(x = "Country", y = "CO2 Tons per Area") +
ggtitle("CO2 Emissions per Area for Top Countries in 2020") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
scale_fill_brewer(palette = "Set3") + scale_y_continuous(labels = scales::comma)
gdp_threshold <- 25000
df_categorized <- wdi_data %>%
mutate(GDP_per_capita = NY.GDP.MKTP.KD / SP.POP.TOTL)
df_categorized <- df_categorized %>%
mutate(development_status = ifelse(GDP_per_capita >= gdp_threshold, "Developed", "Developing"))
df_categorized <- na.omit(df_categorized)
developed_countries <- df_categorized %>%
filter(development_status == "Developed")
developing_countries <- df_categorized %>%
filter(development_status == "Developing")
emissions_2020 <- df_categorized %>%
filter(Year == 2020)
top_developed <- emissions_2020 %>%
filter(development_status == "Developed") %>%
top_n(10, wt = CO2.emission..Tons.)
top_developing <- emissions_2020 %>%
filter(development_status == "Developing") %>%
top_n(10, wt = CO2.emission..Tons.)
# Plot emissions for the top 10 developed countries in 2020
developed_plot <- ggplot(top_developed, aes(x = reorder(Country, -CO2.emission..Tons.), y = CO2.emission..Tons., fill = development_status)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 CO2 Emissions in 2020: Developed Countries",
x = "Country",
y = "CO2 Emissions (Tons)",
fill = "Development Status") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
# Plot emissions for the top 10 developing countries in 2020
developing_plot <- ggplot(top_developing, aes(x = reorder(Country, -CO2.emission..Tons.), y = CO2.emission..Tons., fill = development_status)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 CO2 Emissions in 2020: Developing Countries",
x = "Country",
y = "CO2 Emissions (Tons)",
fill = "Development Status") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
print(developed_plot)
print(developing_plot)
emissions_2020_excluded <- anti_join(emissions_2020, top_developed, by = c("Country", "development_status"))
emissions_2020_excluded <- anti_join(emissions_2020_excluded, top_developing, by = c("Country", "development_status"))
# Scatter plot of GDP (Per Capita) vs. CO2 emissions for 2020 (excluding top 10)
ggplot(emissions_2020_excluded, aes(x = GDP_per_capita, y = CO2.emission..Tons., color = development_status)) +
geom_point() +
labs(title = "GDP (Per Capita) vs. CO2 Emissions in 2020 (Excluding Top 10):\nDeveloped vs. Developing Countries",
x = "GDP (Per Capita)",
y = "CO2 Emissions (Tons)",
color = "Development Status")
china_us_data <- wdi_data %>%
filter(Country %in% c("China", "United States"))
# Plot the pollution rates for China and the US
ggplot(china_us_data, aes(x = Year, y = CO2.emission..Tons., color = Country)) +
geom_line() +
labs(title = "CO2 Emissions Comparison: China vs. United States",
x = "Year",
y = "CO2 Emissions (Tons)",
color = "Country") + scale_y_continuous(labels = scales::comma)
